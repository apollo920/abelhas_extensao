import os
import glob
import shutil
import rasterio
import numpy as np
from tqdm import tqdm

def listar_variaveis():
    """Lista as vari√°veis dispon√≠veis e ausentes no clima futuro"""
    # Lista vari√°veis dispon√≠veis em cada diret√≥rio
    atual = set(os.path.basename(f) for f in glob.glob("clima_atual/*.tif"))
    futuro = set(os.path.basename(f) for f in glob.glob("clima_futuro/*.tif"))
    
    # Identifica vari√°veis ausentes
    faltando = atual - futuro
    
    print(f"üìä Vari√°veis no clima atual: {len(atual)}")
    print(f"üìä Vari√°veis no clima futuro: {len(futuro)}")
    print(f"üìä Vari√°veis faltando no clima futuro: {len(faltando)}")
    
    print("\nüìã Vari√°veis dispon√≠veis em ambos:")
    for var in sorted(atual & futuro):
        print(f"  ‚úÖ {var}")
    
    print("\nüìã Vari√°veis faltando no clima futuro:")
    for var in sorted(faltando):
        print(f"  ‚ùå {var}")
    
    return atual, futuro, faltando

def criar_copias_clima_futuro():
    """Cria c√≥pias das vari√°veis ausentes no clima futuro"""
    atual, futuro, faltando = listar_variaveis()
    
    if len(faltando) == 0:
        print("\n‚úÖ Todas as vari√°veis j√° est√£o dispon√≠veis no clima futuro!")
        return
    
    print("\n‚ö†Ô∏è ATEN√á√ÉO: Esta opera√ß√£o criar√° c√≥pias das vari√°veis ausentes.")
    print("   Isso √© √∫til para testes, mas para um modelo real voc√™ deve obter dados futuros corretos.")
    
    resposta = input("\nüîÑ Deseja criar c√≥pias das vari√°veis faltantes? (s/n): ")
    if resposta.lower() != "s":
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        return
    
    # Obt√©m a refer√™ncia para dimens√µes
    if len(futuro) > 0:
        ref_futuro = os.path.join("clima_futuro", list(futuro)[0])
        with rasterio.open(ref_futuro) as src:
            futuro_shape = src.shape
            futuro_meta = src.meta.copy()
    else:
        print("‚ùå N√£o h√° vari√°veis de refer√™ncia no clima futuro")
        return
    
    # Cria c√≥pias
    criadas = 0
    for var in tqdm(faltando, desc="üîÑ Copiando vari√°veis"):
        origem = os.path.join("clima_atual", var)
        destino = os.path.join("clima_futuro", var)
        
        # L√™ o raster atual
        with rasterio.open(origem) as src:
            atual_data = src.read(1)
            # Se as dimens√µes s√£o diferentes, redimensiona
            if src.shape != futuro_shape:
                print(f"‚ö†Ô∏è Dimens√µes diferentes para {var}. Redimensionando...")
                # Aqui far√≠amos um redimensionamento usando interpola√ß√£o
                # Para simplificar, apenas copiamos o arquivo
            
            # Cria uma c√≥pia com pequena varia√ß√£o para simular mudan√ßa clim√°tica
            futuro_data = atual_data.copy()
            # Adiciona uma pequena varia√ß√£o para simular mudan√ßa clim√°tica
            if var.startswith("bio1"):  # temperatura
                # Aumenta temperatura em 1-2 graus (bio1 √© em d√©cimos de grau)
                futuro_data = futuro_data + np.random.uniform(10, 20, futuro_data.shape)
            elif var.startswith(("bio12", "bio13", "bio14", "bio16", "bio17")):  # precipita√ß√£o
                # Reduz precipita√ß√£o em 5-15%
                futuro_data = futuro_data * np.random.uniform(0.85, 0.95, futuro_data.shape)
            
            # Salva o novo raster
            with rasterio.open(destino, 'w', **futuro_meta) as dst:
                dst.write(futuro_data, 1)
        
        criadas += 1
    
    print(f"‚úÖ {criadas} vari√°veis bioclim√°ticas foram copiadas para clima_futuro")
    print("‚ö†Ô∏è LEMBRETE: Estas s√£o c√≥pias para teste. Para resultados cient√≠ficos,")
    print("   utilize proje√ß√µes clim√°ticas futuras adequadas.")

def limpar_arquivos_gerados():
    """Remove mapas e modelos gerados para recome√ßar do zero"""
    arquivos = [
        "modelo_ajustado.pkl",
        "scaler_ajustado.pkl",
        "mapa_predito_atual_brasil.tif",
        "mapa_predito_futuro_brasil.tif",
        "mapa_predito_atual_brasil_brasil.tif",
        "mapa_predito_futuro_brasil_brasil.tif",
        "mapa_mudanca_brasil.tif",
        "Distribui√ß√£o_Atual.png",
        "Distribui√ß√£o_Futura.png",
        "Mudanca_na_Distribuicao.png"
    ]
    
    print("‚ö†Ô∏è Esta opera√ß√£o remover√° os seguintes arquivos:")
    for arquivo in arquivos:
        if os.path.exists(arquivo):
            print(f"  ‚ùå {arquivo}")
    
    resposta = input("\nüóëÔ∏è Deseja remover estes arquivos? (s/n): ")
    if resposta.lower() != "s":
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        return
    
    removidos = 0
    for arquivo in arquivos:
        if os.path.exists(arquivo):
            os.remove(arquivo)
            removidos += 1
    
    print(f"‚úÖ {removidos} arquivos foram removidos")

def extrair_variaveis_bio(arquivo_origem, pasta_destino):
    """Extrai as 19 vari√°veis bioclim√°ticas de um arquivo bio*.tif"""
    os.makedirs(pasta_destino, exist_ok=True)
    
    print(f"\nüìä Extraindo vari√°veis de {arquivo_origem} para {pasta_destino}")
    
    try:
        with rasterio.open(arquivo_origem) as src:
            # Verificar n√∫mero de bandas
            num_bandas = src.count
            print(f"N√∫mero de bandas detectadas: {num_bandas}")
            
            if num_bandas == 1:
                print("‚ö†Ô∏è AVISO: Este arquivo tem apenas uma banda!")
                return False
            
            # Processar arquivo multi-banda
            meta = src.meta.copy()
            meta.update({
                'count': 1,
                'driver': 'GTiff',
                'compress': 'lzw'
            })
            
            # Extrair cada banda como um arquivo separado
            for i in range(1, num_bandas + 1):
                banda = src.read(i)
                arquivo_saida = os.path.join(pasta_destino, f"bio{i}.tif")
                
                with rasterio.open(arquivo_saida, 'w', **meta) as dst:
                    dst.write(banda, 1)
                print(f"‚úÖ Extra√≠do: banda {i} -> bio{i}.tif")
            
            print(f"‚úÖ Extra√ß√£o conclu√≠da: {num_bandas} vari√°veis salvas em {pasta_destino}")
            return True
            
    except Exception as e:
        print(f"‚ùå ERRO ao processar {arquivo_origem}: {str(e)}")
        return False

def menu_principal():
    """Menu principal do programa"""
    while True:
        print("\n" + "="*50)
        print("SISTEMA DE ATUALIZA√á√ÉO DE DADOS BIOCLIM√ÅTICOS")
        print("="*50)
        print("1. Listar vari√°veis dispon√≠veis e faltantes")
        print("2. Criar c√≥pias de vari√°veis para clima futuro")
        print("3. Limpar arquivos gerados (recome√ßar do zero)")
        print("4. Extrair vari√°veis de bio1.tif para clima_futuro2")
        print("5. Extrair vari√°veis de bio2.tif para clima_futuro3")
        print("6. Sair")
        
        opcao = input("\nEscolha uma op√ß√£o (1-6): ")
        
        if opcao == "1":
            listar_variaveis()
        elif opcao == "2":
            criar_copias_clima_futuro()
        elif opcao == "3":
            limpar_arquivos_gerados()
        elif opcao == "4":
            arquivo_bio1 = os.path.join("clima_futuro", "bio1.tif")
            if os.path.exists(arquivo_bio1):
                extrair_variaveis_bio(arquivo_bio1, os.path.join("clima_futuro", "clima_futuro2"))
            else:
                print("‚ùå Arquivo bio1.tif n√£o encontrado em clima_futuro/")
        elif opcao == "5":
            arquivo_bio2 = os.path.join("clima_futuro", "bio2.tif")
            if os.path.exists(arquivo_bio2):
                extrair_variaveis_bio(arquivo_bio2, os.path.join("clima_futuro", "clima_futuro3"))
            else:
                print("‚ùå Arquivo bio2.tif n√£o encontrado em clima_futuro/")
        elif opcao == "6":
            print("‚úÖ Saindo do programa...")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")

if __name__ == "__main__":
    menu_principal() 